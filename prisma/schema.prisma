generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int          @default(autoincrement()) @id
  userId       Int          @map(name: "user_id")
  expires      DateTime
  sessionToken String       @unique @map(name: "session_token")
  accessToken  String       @unique @map(name: "access_token")
  createdAt    DateTime     @default(now()) @map(name: "created_at")
  updatedAt    DateTime     @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int            @default(autoincrement()) @id
  identifier String
  token      String         @unique
  expires    DateTime
  createdAt  DateTime       @default(now()) @map(name: "created_at")
  updatedAt  DateTime       @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model User {
  id            Int         @default(autoincrement()) @id
  firstName     String
  lastName      String
  email         String     @unique
  emailVerified DateTime?   @map(name: "email_verified")
  image         String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @default(now()) @map(name: "updated_at")
  roles         Role[]

  @@map(name: "users")
}

enum Role {
    UBIADMIN
    SUPERADMIN
    ADMIN
    MANAGER
    READER
}

model Box {
  id            Int             @default(autoincrement()) @id
  name          String
  serialNumber  String          @unique
  devEUI        String          @unique
  dock          Dock?           @relation("dockBox")
  weighingArea  WeighingArea?   @relation("weighingBox")
  gate          Gate?           @relation("gateBox")
  beginRT       RotationTime?   @relation("beginPlaceBox")
  endingRT      RotationTime?   @relation("endingPlaceBox")

  @@map(name: "boxes")
}

model Gate {
  id            Int             @default(autoincrement()) @id
  name          String
  store         Warehouse       @relation(fields: [storeId], references: [id])
  storeId       Int
  boxId         Int
  box           Box             @relation("gateBox", fields: [boxId], references: [id])

  @@map(name: "gates")
}

model Warehouse {
  id            Int             @default(autoincrement()) @id
  name          String
  gates         Gate[]

  @@map(name: "warehouses")
}

model WeighingArea {
  id            Int             @default(autoincrement()) @id
  name          String
  boxId         Int
  box           Box             @relation("weighingBox", fields: [boxId], references: [id])

  @@map(name: "weighing_areas")
}

model Trailer {
 id             Int             @default(autoincrement()) @id
 licensePlate   String          @unique
 transporter    String

  @@map(name: "trailers")
}

model Timeslot {
 id             Int             @default(autoincrement()) @id
 name           String
 beginTime      DateTime
 endTime        DateTime

  @@map(name: "timeslots")
}

model Dock {
  id            Int             @default(autoincrement()) @id
  name          String
  boxId         Int
  box           Box             @relation("dockBox", fields: [boxId], references: [id])

  @@map(name: "docks")
}

model RotationTime {
  id            Int             @default(autoincrement()) @id
  beginPlaceId  Int
  beginPlace    Box             @relation("beginPlaceBox", fields: [beginPlaceId], references: [id])
  endingPlaceId Int
  endingPlace   Box             @relation("endingPlaceBox", fields: [endingPlaceId], references: [id])

  @@map(name: "rotation_times")
}

model Padlock {
  id            Int             @default(autoincrement()) @id
  name          String
  reference     String

  @@map(name: "padlocks")
}


